name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify installation
      run: |
        python --version
        python -c "import django; print(f'Django version: {django.__version__}')"
    
    - name: Run migrations
      run: |
        python manage.py makemigrations
        python manage.py migrate
    
    - name: Run Django tests
      run: |
        python manage.py test


  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    # ✅ Обновлённый шаг: корректная работа с base64-ключом из GitHub Variables
    - name: Setup SSH key
      env:
        SSH_B64: ${{ vars.SSH_PRIVATE_KEY }}
        SERVER_HOST: ${{ vars.SERVER_HOST }}
      run: |
        set -e
        mkdir -p ~/.ssh
        echo "SSH folder created"

        # декодируем base64, убирая \r (символы Windows)
        echo "$SSH_B64" | tr -d '\r' | base64 --decode > ~/.ssh/id_ed25519

        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/id_ed25519
        echo "SSH key saved and permissions set"

        # добавляем сервер в known_hosts (не падаем, если не удаётся)
        ssh-keyscan -H "$SERVER_HOST" >> ~/.ssh/known_hosts 2>/dev/null || echo "Host not resolved, skipping"
        echo "Server added to known hosts"

        # проверим наличие ключа
        echo "=== SSH Key Verification ==="
        ls -la ~/.ssh/
        head -1 ~/.ssh/id_ed25519 | sed 's/.*/Key begins with: &/'
        tail -1 ~/.ssh/id_ed25519 | sed 's/.*/Key ends with: &/'

    - name: Test SSH connection
      run: |
        echo "Testing SSH connection..."
        if ssh -i ~/.ssh/id_ed25519 -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "echo '✅ SSH connection successful!'"; then
          echo "SSH test passed"
        else
          echo "SSH test failed"
          exit 1
        fi
    
    - name: Create deployment directory
      run: |
        ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "mkdir -p ${{ vars.DEPLOY_PATH }}"
        echo "Deployment directory created"
    
    - name: Copy files to server
      run: |
        echo "Copying files to server..."
        rsync -avz -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
          --exclude '.git' \
          --exclude '.github' \
          --exclude '.gitignore' \
          ./ ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }}:${{ vars.DEPLOY_PATH }}/
        echo "Files copied successfully"
    
    - name: Install dependencies on server
      run: |
        echo "Installing dependencies..."
        ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
          cd ${{ vars.DEPLOY_PATH }}
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          echo 'Dependencies installed'
        "
    
    - name: Run migrations
      run: |
        ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
          cd ${{ vars.DEPLOY_PATH }}
          python3 manage.py makemigrations
          python3 manage.py migrate
          echo 'Migrations completed'
        "
    
    - name: Final check
      run: |
        ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ vars.SERVER_USER }}@${{ vars.SERVER_HOST }} "
          cd ${{ vars.DEPLOY_PATH }}
          echo '=== Deployment Verification ==='
          ls -la
          python3 manage.py check
          echo '🎉 DEPLOYMENT SUCCESSFUL!'
          echo 'App ready at: http://${{ vars.SERVER_HOST }}:8000'
        "
